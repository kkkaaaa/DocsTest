汇编语言
========

指令格式
--------

操作码 + 操作数

-  **操作数**

   -  寄存器

   -  内存

   -  立即数

常见寄存器
----------

通用寄存器
~~~~~~~~~~

数据寄存器
^^^^^^^^^^

+----------------+------+------+-------+-----------------------+
| **数据寄存器** | 32位 | 16位 | 8位   | 说明                  |
+================+======+======+=======+=======================+
| 扩展累加寄存器 | EAX  | AX   | AL AH | 通常保存返            |
|                |      |      |       | 回值，累加器可用于乘  |
|                |      |      |       | 、除、输入/输出等操作 |
+----------------+------+------+-------+-----------------------+
| 扩展计数寄存器 | ECX  | CX   | CL CH | 通常用来表示          |
|                |      |      |       | 循环次数，在循环和字  |
|                |      |      |       | 符串操作控制循环次数  |
|                |      |      |       | ，在位操作移多位时用  |
|                |      |      |       | CL 来指明移位位数     |
+----------------+------+------+-------+-----------------------+
| 扩展数据寄存器 | EDX  | DX   | DL DH | 在                    |
|                |      |      |       | 进行乘、除运算时，它  |
|                |      |      |       | 可作为默认的操作数参  |
|                |      |      |       | 与运算，也可用于存放  |
|                |      |      |       | I/O 的端口地址        |
+----------------+------+------+-------+-----------------------+
| 扩展基址寄存器 | EBX  | BX   | BL BH | 可                    |
|                |      |      |       | 作为存储器指针来使用  |
+----------------+------+------+-------+-----------------------+

指针寄存器
^^^^^^^^^^

+--------------------+------+------+--------------------------+
| **指针寄存器**     | 32位 | 16位 | 说明                     |
+====================+======+======+==========================+
| 扩展堆栈指针寄存器 | ESP  | SP   | 栈顶指                   |
|                    |      |      | 针，可访问栈顶，动态变化 |
|                    |      |      | ，临时变量越多ESP值越小  |
+--------------------+------+------+--------------------------+
| 扩展基址指针寄存器 | EBP  | BP   | 栈底指针                 |
|                    |      |      | ，可直接存取堆栈中的数据 |
+--------------------+------+------+--------------------------+

变址寄存器
^^^^^^^^^^

============== ==== ==== ==============================================
**变址寄存器** 32位 16位 说明
============== ==== ==== ==============================================
扩展来源寄存器 ESI  SI   源地址，存储器指针、串指令中的源操作数指针
扩展目标寄存器 EDI  DI   目的地址，存储器指针、串指令中的目的操作数指针
============== ==== ==== ==============================================

指令指针寄存器
~~~~~~~~~~~~~~

================== ==== ==== ===========================
**指令指针寄存器** 32位 16位 说明
================== ==== ==== ===========================
指令指针寄存器     EIP  IP   指向CPU即将执行的下一条指令
================== ==== ==== ===========================

标志寄存器
~~~~~~~~~~

+----------------+-----------+-----------+---------------------+
| **标志寄存器** | 32位      | 16位      | 说明                |
+================+===========+===========+=====================+
| **标志寄存器** | **ELAGS** | **FLAGS** | 记                  |
|                |           |           | 录程序执行时的状态  |
+----------------+-----------+-----------+---------------------+
|                |           |           |                     |
+----------------+-----------+-----------+---------------------+
| **状态标志位** |           |           |                     |
+----------------+-----------+-----------+---------------------+
| 进/借位        | CF        | CF        |                     |
+----------------+-----------+-----------+---------------------+
| 零             | ZF        | ZF        | 计算结果是否为零    |
+----------------+-----------+-----------+---------------------+
| 符号           | SF        | SF        |                     |
+----------------+-----------+-----------+---------------------+
| 溢出           | OF        | OF        | 最高位和次高        |
|                |           |           | 位异或结果，运算结  |
|                |           |           | 果是否超过有效范围  |
+----------------+-----------+-----------+---------------------+
| 奇偶           | PF        | PF        | 计算                |
|                |           |           | 结果二进制数1的个数 |
|                |           |           | ，0为奇数，1为偶数  |
+----------------+-----------+-----------+---------------------+
| 辅助进位       | AF        | AF        | 低位是否进位或借位  |
+----------------+-----------+-----------+---------------------+
|                |           |           |                     |
+----------------+-----------+-----------+---------------------+
| **控制标志位** |           |           |                     |
+----------------+-----------+-----------+---------------------+
| 方向           | DF        | DF        |                     |
+----------------+-----------+-----------+---------------------+
| 中断屏蔽       | IF        | IF        |                     |
+----------------+-----------+-----------+---------------------+
| 陷阱标志       | TF        | TF        |                     |
+----------------+-----------+-----------+---------------------+

段寄存器
~~~~~~~~

============ ==== ==== ============
**段寄存器** 32位 16位 说明
============ ==== ==== ============
代码段寄存器      CS   代码、IP相关
数据段寄存器      DS   数据相关
堆栈段寄存器      SS   SP、BP相关
扩展段寄存器      ES   数据相关
扩展段寄存器 FS        数据相关
扩展段寄存器 GS        数据相关
============ ==== ==== ============

内存管理
--------

20位地址总线，物理内存是连续的，实际上并没用被划分为多个段，分段机制只是在逻辑上方便管理才划分的。

每个段都有 段基址 和 范围

分段机制
~~~~~~~~

16位汇编下，8086
CPU有20条地址线，但操作数最大16位，使用逻辑地址时，产生不了20位的地址，所以采用分段机制。

实际上就是

物理地址 = 段基地址 \* 0x10(就是16) + 段内偏移

段超越
~~~~~~

操作数有对应的段，所以偏移的都是默认的段基址

如果不想使用默认的段，就更改默认绑定的段

指明要偏移的段 段 : [偏移地址]

段寄存器默认关联
~~~~~~~~~~~~~~~~

====================== ====== ========== ===============
访问存储器方式         默认段 偏移地址   例子
====================== ====== ========== ===============
取指令                 CS     IP         mov ax, [ip]
堆栈操作               SS     SP         mov ax, [sp]
一般数据               DS     有效地址EA mov ax, [15h]
                                         mov ax, [bx]
BP基址寻址             SS     有效地址EA mov ax, [bp+6h]
串操作指令的源操作数   DS     SI         mov ax, [si]
串操作指令的目的操作数 ES     DI         mov ax, [di]
====================== ====== ========== ===============

堆栈
~~~~

栈顶低地址

栈顶高地址

入栈

抬高堆栈

栈顶SP变小

出栈反之

+--------------+
| 栈顶SP 0x90  |
+==============+
|              |
+--------------+
|              |
+--------------+
|              |
+--------------+
| 栈底BP 0x100 |
+--------------+

常见指令
--------

操作数简写
~~~~~~~~~~

========== ======================== ===============================
操作数简写 含义                     举例
========== ======================== ===============================
r8         任意8位通用寄存器        AH AL BH BL CH CL DH DL
r16        任意一个16位通用寄存器   AX BX CX DX SI DI BP SP
r32        任意一个32位通用寄存器   EAX EBX ECX EDX ESI EDI EBP ESP
reg        代表所有r8或者r16或者r32 以上全部
seg        段寄存器                 CS/DS/ES/SS
m8         一个8位存储器操作数单元  BYTE PTR DS:[0x12345678]
m16        一个16位存储器操作数单元 WORD PTR DS:[0x12345678]
m32        一个32位存储器操作数单元 DWORD PTR DS:[0x12345678]
mem        代表所有m8或者m16或者m32 以上全部
i8         8位数字                  
i16        16位数字                 
i32        32位数字                 
imm        一个数字                 
========== ======================== ===============================

数据操作指令
~~~~~~~~~~~~

+----------------+----------------+----------------+----------------+
| 指令           | 操作数1        | 操作数2        | 执行操作       |
+================+================+================+================+
| **             |                |                |                |
| 数据传输指令** |                |                |                |
+----------------+----------------+----------------+----------------+
| mov            | reg            | reg / mem /    | 将操作数2的值  |
|                |                | imm            | 传进操作数1中  |
+----------------+----------------+----------------+----------------+
|                | mem            | reg / imm      |                |
+----------------+----------------+----------------+----------------+
|                | seg            | reg16 / mem16  |                |
+----------------+----------------+----------------+----------------+
| xchg           | reg            | reg / mem      | 将             |
|                |                |                | 操作数1与操作  |
|                |                |                | 数2的内容交换  |
+----------------+----------------+----------------+----------------+
|                | mem            | reg            |                |
+----------------+----------------+----------------+----------------+
| lea            | reg            | mem            | 将源操作数的地 |
|                |                |                | 址传送到目标操 |
|                |                |                | 作数的寄存器中 |
+----------------+----------------+----------------+----------------+
|                |                |                |                |
+----------------+----------------+----------------+----------------+
| **             |                |                |                |
| 堆栈操作指令** |                |                |                |
+----------------+----------------+----------------+----------------+
| push           | reg / mem /    |                | 将操           |
|                | seg / imm      |                | 作数1中的内存  |
|                |                |                | 压入栈中，ESP  |
|                |                |                | 自减4（1字节） |
+----------------+----------------+----------------+----------------+
| pop            | reg / mem /    |                | 将操           |
|                | seg            |                | 作数1中的内存  |
|                |                |                | 压入栈中，ESP  |
|                |                |                | 自增4（1字节） |
+----------------+----------------+----------------+----------------+
| pushf / pushfd |                |                | 将EFLA         |
|                |                |                | G压入栈中，ESP |
|                |                |                | 自减4（1字节） |
+----------------+----------------+----------------+----------------+
| popf / popfd   |                |                | 将栈顶数据存放 |
|                |                |                | 到EFLAG中，ESP |
|                |                |                | 自增4（1字节） |
+----------------+----------------+----------------+----------------+
| pusha / pushad |                |                | 将所有         |
|                |                |                | 寄存器状态入栈 |
+----------------+----------------+----------------+----------------+
| popa / popad   |                |                | 从栈顶开       |
|                |                |                | 始将所有数据存 |
|                |                |                | 入各个寄存器中 |
+----------------+----------------+----------------+----------------+

算数运算指令
~~~~~~~~~~~~

+------+-----------+-----------------+---------+-------------------+
| 指令 | 操作数1   | 操作数2         | 操作数3 | 执行操作          |
+======+===========+=================+=========+===================+
| add  | reg       | reg / mem / imm |         | 将操作数1与操     |
|      |           |                 |         | 作数2相加，并将结 |
|      |           |                 |         | 果保存在操作数1中 |
+------+-----------+-----------------+---------+-------------------+
|      | mem       | reg / imm       |         |                   |
+------+-----------+-----------------+---------+-------------------+
| adc  | reg       | reg / mem imm   |         | 将                |
|      |           |                 |         | 操作数1与操作数2  |
|      |           |                 |         | 和标志位CF（进/借 |
|      |           |                 |         | 位）相加，并将结  |
|      |           |                 |         | 果保存在操作数1中 |
+------+-----------+-----------------+---------+-------------------+
|      | mem       | reg / imm       |         |                   |
+------+-----------+-----------------+---------+-------------------+
| sub  | reg       | reg / mem / imm |         | 将操作数1与源操   |
|      |           |                 |         | 作数2相减，并将结 |
|      |           |                 |         | 果保存在操作数1中 |
+------+-----------+-----------------+---------+-------------------+
|      | mem       | reg / imm       |         |                   |
+------+-----------+-----------------+---------+-------------------+
| sbb  | reg       | reg / mem / imm |         | 将操作数1         |
|      |           |                 |         | 与源操作数2相减， |
|      |           |                 |         | 再减去标志位CF（  |
|      |           |                 |         | 进/借位），并将结 |
|      |           |                 |         | 果保存在操作数1中 |
+------+-----------+-----------------+---------+-------------------+
|      | mem       | reg / imm       |         |                   |
+------+-----------+-----------------+---------+-------------------+
| inc  | reg / mem |                 |         | 将目标操作数      |
|      |           |                 |         | 自增1，CF标志不变 |
+------+-----------+-----------------+---------+-------------------+
| dec  | reg / mem |                 |         | 将目标操作数      |
|      |           |                 |         | 自减1，CF标志不变 |
+------+-----------+-----------------+---------+-------------------+
| mul  | reg / mem |                 |         | 将AL/AX/E         |
|      |           |                 |         | AX和操作数1相乘， |
|      |           |                 |         | 结果放置在EDX:EAX |
+------+-----------+-----------------+---------+-------------------+
| imul | reg / mem |                 |         | 将AL/AX/EAX       |
|      |           |                 |         | 和操作数1相乘，结 |
|      |           |                 |         | 果放置在EDX:EAX中 |
|      |           |                 |         | ，此为有符号操作  |
+------+-----------+-----------------+---------+-------------------+
|      | reg       | reg / mem / imm |         | 将操作数1和       |
|      |           |                 |         | 操作数2相乘，将乘 |
|      |           |                 |         | 积保存到操作数1中 |
|      |           |                 |         | ，此为有符号操作  |
+------+-----------+-----------------+---------+-------------------+
|      | reg       | reg / mem       | imm     | 将操作数2和       |
|      |           |                 |         | 操作数3相乘，将乘 |
|      |           |                 |         | 积保存到操作数1中 |
|      |           |                 |         | ，此为有符号操作  |
+------+-----------+-----------------+---------+-------------------+
| div  | reg / mem |                 |         | 将AX、DX:AX或EDX: |
|      |           |                 |         | EAX中的值除以操作 |
|      |           |                 |         | 数1，结果存储到A  |
|      |           |                 |         | X(AH:AL)、DX:AX或 |
|      |           |                 |         | EDX:EAX寄存器     |
+------+-----------+-----------------+---------+-------------------+
| idiv | reg / mem |                 |         | 将AL、AX或EAX寄存 |
|      |           |                 |         | 器中的值除以源操  |
|      |           |                 |         | 作数，结果        |
|      |           |                 |         | 存储到AX、DX:AX或 |
|      |           |                 |         | EDX:EAX寄存器     |
|      |           |                 |         | ，此为有符号操作  |
+------+-----------+-----------------+---------+-------------------+

位运算指令
~~~~~~~~~~

==== ========= =============== ==================================
指令 操作数1   操作数2         执行操作
==== ========= =============== ==================================
and  reg       reg / mem / imm 将操作数1与操作数2进行逐位"与"
                               运算，结果存储到操作数1中
\    mem       reg / imm       
or   reg       reg / mem / imm 将操作数1与操作数2进行逐位""或"
                               运算，结果存储到操作数1中
\    mem       reg / imm       
xor  reg       reg / mem / imm 将操作数1与操作数2进行逐位""异或"
                               运算，结果存储到操作数1中
\    mem       reg / imm       
not  reg / mem                 对目标操作数执行按位取反结果存储
                               到目标操作数位置
shl  reg       imm             对给定的目的操作数左移imm / CL次
                               每次移位时最高位移入标志位CF中，
                               最低位补零
\    reg       CL              
shr  reg       imm             对给定的目的操作数右移imm / CL次，
                               每次移位最低位移至标志位CF中
\    reg       CL              
==== ========= =============== ==================================

逻辑运算指令
~~~~~~~~~~~~

配合跳转指令，实现选择、循环结构

==== ======= =============== ============================
指令 操作数1 操作数2         执行操作
==== ======= =============== ============================
cmp  reg     reg / mem / imm 用操作数1减去操作数2，并根据
                             结果设置EFLAGS寄存器中的状态
                             标志，然后丢弃结果
test reg     reg / mem / imm 将操作数1与操作数2的按位与操
                             作"与"，并根据结果设置SF、
                             ZF及PF状态标志，然后丢弃结果
==== ======= =============== ============================

串操作指令
~~~~~~~~~~

操作某一内存区域中的数据

内存拷贝 内存比较 初始化内存 循环读取内存等

+------------+----------+----------+--------------------------------+
| 指令       | 操作数1  | 操作数2  | 执行操作                       |
+============+==========+==========+================================+
| movs b/w/d | ES:[EDI] | DS:[ESI] | 将操作数2                      |
|            |          |          | 的值传送到操作数1中，同时根据D |
|            |          |          | F位，EDI和ESI自增或自减1(byte) |
|            |          |          | / 2(word) / 4(dword)           |
+------------+----------+----------+--------------------------------+
| stos b/w/d | DS:[EDI] |          | 将AL、AX或EAX寄存器中          |
|            |          |          | 的数存储到操作数1中，同时根据D |
|            |          |          | F位，EDI和ESI自增或自减1(byte) |
|            |          |          | / 2(word) / 4(dword)           |
+------------+----------+----------+--------------------------------+
| lods b/w/d | DS:[ESI] |          | 将操作数1的数据传送到          |
|            |          |          | AL、AX或EAX寄存器中，同时根据D |
|            |          |          | F位，EDI和ESI自增或自减1(byte) |
|            |          |          | / 2(word) / 4(dword)           |
+------------+----------+----------+--------------------------------+
| cmps b/w/d | ES:[EDI] | DS:[ESI] | 比较操作数1和操                |
|            |          |          | 作数2的值，并根据结果设置EFLAG |
|            |          |          | S寄存器中的状态标志。同时根据D |
|            |          |          | F位，EDI和ESI自增或自减1(byte) |
|            |          |          | / 2(word) / 4(dword)           |
+------------+----------+----------+--------------------------------+

串操作一般配合\ **重复前缀指令**\ 使用

**重复次数**\ 有\ **ECX**\ 决定

重复前缀指令
~~~~~~~~~~~~

===== ========== ========= =========
指令  解释       终止条件1 终止条件2
===== ========== ========= =========
rep   重复       ECX = 0   
repe  相等重复   ECX = 0   ZF = 0
repne 不相等重复 ECX = 0   ZF = 1
===== ========== ========= =========

========== ==================================================
指令       解释
========== ==================================================
repe cmps  比较以ES[EDI与DS[ESI]为起始，范围为ECX的两块内存
           是否完全相等
repne cmps 比较以ES:[EDI]与DS:[ES]为起始，范围为ECX的两块内存
           是否完全不相等
repe scas  以ES:[ED]为起始，查找ECX范围内与EAX是否完全相等
           以ES:[EDI]为起始，查找ECX范围内与EAX是否完全不相等
========== ==================================================

控制转移指令
~~~~~~~~~~~~

+------+-----------------+-------------------------------------------+
| 指令 | 操作数1         | 执行操作                                  |
+======+=================+===========================================+
| JMP  | reg / mem / imm | 跳转到                                    |
|      |                 | 操作数1所指向的地址，从目的地址处执行指令 |
+------+-----------------+-------------------------------------------+
| LOOP | imm             | 跳转到操作数1所指向                       |
|      |                 | 的地址，同时ECX减1，当ECX为0时，不会跳转  |
+------+-----------------+-------------------------------------------+
| CALL | reg / mem / imm | 跳转到操作数1所指向的地址                 |
|      |                 | ，同时将CALL指令后面的指令所在的地址入栈  |
+------+-----------------+-------------------------------------------+
| RET  |                 | 从栈顶获取数                              |
|      |                 | 据当作地址并跳转，同时栈顶数据出栈，即ESP |
|      |                 | + 4                                       |
+------+-----------------+-------------------------------------------+
| JCC  |                 |                                           |
+------+-----------------+-------------------------------------------+

寻址方式
--------

以操作数分为三大寻址方式

+--------------+--------------------+-------------------------------------------+
| 操作数       | 寻址方式           | 示例                                      |
+==============+====================+===========================================+
| 数字         | 立即数寻址         | mov eax, 1                                |
+--------------+--------------------+-------------------------------------------+
| 寄存器       | 寄存器寻址         | mov ecx, eax                              |
+--------------+--------------------+-------------------------------------------+
| 存储器(内存) |                    |                                           |
+--------------+--------------------+-------------------------------------------+
|              | 直接寻址           | mov eax,dword ptr ds:[0x01500000]         |
|              |                    | mov eax,word ptr ds:[0x01500000]          |
|              |                    | mov eax,byte ptr ds:[0x01500000]          |
+--------------+--------------------+-------------------------------------------+
|              | 寄存器间接寻址     | mov eax,dword ptr [esi]                   |
+--------------+--------------------+-------------------------------------------+
|              | 寄存器相对寻址     | mov eax,dword ptr [esi + 0x0C]            |
+--------------+--------------------+-------------------------------------------+
|              | 基址变址寻址       | mov eax,dword ptr [esi + esi]             |
+--------------+--------------------+-------------------------------------------+
|              | 相对基址变址寻址   | mov eax,dword ptr [ebx + esi + 0x0C]      |
+--------------+--------------------+-------------------------------------------+
|              | 相对比例存储器寻址 | mov eax,dword ptr [ebx + esi \* 2 + 0x0C] |
+--------------+--------------------+-------------------------------------------+

##
